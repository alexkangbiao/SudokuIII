#include "LoadingScene.h"#include "SimpleAudioEngine.h" //#include "MenuScene.h"//#include "SelectLevelScene.h"using namespace CocosDenshion;USING_NS_CC;LoadingScene::LoadingScene() {}LoadingScene::~LoadingScene() {//    log("~LoadingScene is execute");}Scene* LoadingScene::createScene() {    auto scene = Scene::create();    auto layer = LoadingScene::create();    scene->addChild(layer);    return scene;}bool LoadingScene::init() {    if ( !Layer::init() ) {        return false;    }        this->_loadedCount = 0.0f;        this->initBackgroundImage();    this->initLoadingProgress();    this->resetInitParameter();        this->scheduleOnce(CC_SCHEDULE_SELECTOR(LoadingScene::loadingMusicSource), 1);    this->scheduleOnce(CC_SCHEDULE_SELECTOR(LoadingScene::loadingImageSource), 1);    this->scheduleOnce(CC_SCHEDULE_SELECTOR(LoadingScene::loadingAnimation),   1);    this->scheduleOnce(CC_SCHEDULE_SELECTOR(LoadingScene::loadingOthers),      1);    //for schedule    this->scheduleUpdate();        return true;}void LoadingScene::initBackgroundImage() {    auto visibleSize = Director::getInstance()->getVisibleSize();    auto background  = Sprite::create("images/loading_scene_background.png");    background->setPosition(Point(visibleSize.width / 2,                                  visibleSize.height / 2));    this->addChild(background, LoadingSceneDrawingOrderBackground);        auto logo = Sprite::create("images/loading_logo.png");    logo->setPosition(Point(visibleSize.width / 2,                            visibleSize.height * 0.67f) );    this->addChild(logo, LoadingSceneDrawingOrderLogo);    }void LoadingScene::initLoadingProgress() {    Size visibleSize = Director::getInstance()->getVisibleSize();    auto loadingBackground = Sprite::create("images/loading_background.png");//进程条的底图    loadingBackground->setPosition(Point(visibleSize.width / 2,                                         visibleSize.height / 2));    this->addChild(loadingBackground, LoadingSceneDrawingOrderLoading);        _loadingProgress = ProgressTimer::create(Sprite::create("images/loading_progress.png"));//创建一个进程条    _loadingProgress->setBarChangeRate(Point(1, 0));//设置进程条的变化速率    _loadingProgress->setType(ProgressTimer::Type::BAR);//设置进程条的类型    _loadingProgress->setMidpoint(Point(0, 1));//设置进度的运动方向    _loadingProgress->setPosition(Point(loadingBackground->getContentSize().width / 2,                                        loadingBackground->getContentSize().height / 2));    _loadingProgress->setPercentage(0.0f);//设置初始值为0    loadingBackground->addChild(_loadingProgress);        _loadingLabel = Label::createWithBMFont("fonts/carterone-20-white.fnt", "Loading: ");    _loadingLabel->setPosition(Point(loadingBackground->getContentSize().width / 2,                                     loadingBackground->getContentSize().height / 2));    loadingBackground->addChild(_loadingLabel);}void LoadingScene::updateLoading(float loadedCount) {    float percent = loadedCount / LOADED_COUNT * 100.0f;    if (percent <= 100.0f) {        _loadingLabel->setString(StringUtils::format("Loading : %d%%", (int) percent));        _loadingProgress->setPercentage(percent);    }}#pragma mark for  loading sourcevoid LoadingScene::resetInitParameter() {    //set effect volumn    SimpleAudioEngine::getInstance()->setEffectsVolume(1.0f);}void LoadingScene::loadingImageSource(float dt) {//    SpriteFrameCache::getInstance()->addSpriteFramesWithFile("images/menu0.plist");//    if (FileUtils::getInstance()->isFileExist("images/menu1.plist"))//        SpriteFrameCache::getInstance()->addSpriteFramesWithFile("images/menu1.plist");//    if (FileUtils::getInstance()->isFileExist("images/menu2.plist"))//        SpriteFrameCache::getInstance()->addSpriteFramesWithFile("images/menu2.plist");//    SpriteFrameCache::getInstance()->addSpriteFramesWithFile("images/mainmenu_spritesheet_32_2-hd.plist");    _loadedCount ++;}void LoadingScene::loadingMusicSource(float dt) {//    log("loading background music");//   	SimpleAudioEngine::getInstance()->preloadBackgroundMusic("sound/savage_music_theme.wav");//    SimpleAudioEngine::getInstance()->preloadBackgroundMusic("sound/savage_music_desert_battle.wav");            _loadedCount ++;}void LoadingScene::loadingAnimation(float dt) {//        AnimationManager::getInstance()->load();    //    AnimationManager::getInstance()->init_jungle();//    AnimationManager::getInstance()->init_desert();//    AnimationManager::getInstance()->init_underground();//    AnimationManager::getInstance()->init_BossCanibal();//    AnimationManager::getInstance()->init_BossEfreeti();        _loadedCount++;}void LoadingScene::loadingOthers(float dt) {    //init multi language support//    log( LanguageManager::getInstance()->getStringForKey("init_key").c_str());        _loadedCount++;}#pragma mark --void LoadingScene::update(float dt) {    updateLoading(_loadedCount);    if (_loadedCount >= LOADED_COUNT) {		this->scheduleOnce(CC_SCHEDULE_SELECTOR(LoadingScene::switchScene), 1);        this->unscheduleUpdate();    }}void LoadingScene::switchScene(float dt) {//    auto scene = MenuScene::createScene();//    Director::getInstance()->replaceScene(scene);}